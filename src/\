//Our Imports

use std::env;
use std::error::Error;
use std::fmt::Write;
use std::fs::{self, File, OpenOptions};
use std::io::BufWriter;
use std::path::Path;


///Here we will create the config file where credentials will be stored in disk
///to avoid prompting for the credentials or reading from csv.
pub fn create_config_file() -> Result<BufWriter<File>, Box<dyn Error>> {
    let mut cred_path = String::new();
    let home = env::var("HOME")?;
    write!(cred_path, "{}/.aws_cli/credentials", home)?;
    //let path_str = home.push_str(".aws/credentials");
    println!("path we will store credentials{:?}", cred_path);
    let path = Path::new(&cred_path);
    let base_path = path.parent();
    match base_path {
        Some(v) => {
            if v.exists() == false {
                //create the directory
                fs::create_dir(v)?;
            }else{
                //Do nothing if base path already exists
            }
        },
        None => panic!("Full path needed"),
    }
    let file : File = OpenOptions::new()
        .write(true)
        .create(true)
        .truncate(true) //if file already exists, 
        //then delete evrything by making file contents zero
        .open("path")?;
    Ok(BufWriter::new(file))
}



